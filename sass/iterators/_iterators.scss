////
//// Iterators in Sass, just for the heck of it.
//// https://github.com/HugoGiraudel/SassyIteratorsGenerators GitHub repository
//// http://sassmeister.com/gist/d94049a3d516e31a8dad Demo
//// @group iterators
//// @access public
////

/// Iterator initialization
/// @param {List | Map | String} $collection
/// @param {String | Null} $mapping
/// @param {Arglist} $mapping-args - Extra arguments for `$mapping`
/// @return {Iterator}
@function iterator($collection, $mapping: null, $mapping-args...) {
  @return (
    'collection': $collection,
    'position': 0,
    'mapping': $mapping,
    'mapping-args': $mapping-args,
    'value': null,
    'done': false
  );
}

/// Iterator reset
/// @param {Iterator} $iterator
/// @return {Iterator}
/// @require iterator
@function iterator-rewind($iterator) {
  @return iterator(map-get($iterator, 'collection'));
}

/// Iterator validity checker
/// @param {Iterator} $iterator
/// @return {Boolean}
@function iterator-valid($iterator) {
  @return map-get($iterator, 'done') == false;
}

/// Iterator next
/// @param {Iterator} $iterator
/// @return {Iterator}
@function iterator-next($iterator) {
  $collection: map-get($iterator, 'collection');
  $position: map-get($iterator, 'position') + 1;
  $value: map-get($iterator, 'value');
  $mapping: map-get($iterator, 'mapping');
  $done: map-get($iterator, 'done');
  $mapping-args: map-get($iterator, 'mapping-args');

  @if type-of($collection) == 'string' {
    $done: $position > str-length($collection);
    $value: if($done, null, str-slice($collection, $position, $position));
  } @else if type-of($collection) == 'list' {
    $done: $position > length($collection);
    $value: if($done, null, nth($collection, $position));
  } @else if type-of($collection) == 'map' {
    $done: $position > length($collection);
    $value: if($done, null, nth(map-keys($collection), $position) map-get($collection, nth(map-keys($collection), $position)));
  } @else {
    @warn "Unsupported collection type: #{type-of($collection)}.";
  }

  @return map-merge($iterator, (
    'done': $done,
    'value': if($done == false and $mapping, call($mapping, $value, $mapping-args...), $value),
    'position': $position
  ));
}

/// Iterator API cleaner
/// @param {Iterator} $iterator
/// @return {Simple Iterator}
@function iterator-api($iterator) {
  @return (
    'done': map-get($iterator, 'done'),
    'value': map-get($iterator, 'value')
  );
}
